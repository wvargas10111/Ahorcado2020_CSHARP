<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAC2IAAA4lwAAO5oADU6qAABKsQAIT7UAAFG6AABXwQAAWcMAAFrIAABezAAATtIAA1LUAANa
        3AAGX94AFl/XABloywANbNUABmDfAAli3QAOYNwAAGnaAAdt3gAKbN4AH2LXABBg2wAVYtsAFmfYABtl
        2wAeZdkAEWjdABVt3gAlaNkAJWzYAC1q2AAtbNkAMG3ZADJy2QA1cdkAN3TaADtz2AA7dtsANnjbAAJh
        4QAEYOAADGfhAAFv4gAEa+cAAG/kAAFo6AADbOkABW3pABVt5AABcuMABnXjAAxy4gAAdOkABXDsAAty
        6gAMd+8AE3TlABlz4wAccOMAHHPlABVz6QAAdPEAAHryAAB69gAAffYADXvyAAt88wALfPQAAH/5ABR7
        8ABDddcAQnnbAER62gBGf9wAS37cAE1/3AAAjfMAAIL+AACE/gAGhv4ABYj/AAmJ/gANiPwADoz/ABWE
        8gATgPQAGYf0ABSN8QAdifEAEYX4ABCI+gAWi/wAEoz+ABWO/gAei/gAGY79AACS9gAAlfcAAJn6ABeV
        9AAYlfcAHpD7ABqQ/AAdkf0AJ4zyACqP9AAnjvgALpf1ACGS/wAllfwAK5X4ACmW/gAsl/8AKZj9AC+a
        /QAunfwANpP3ADOW9QA5lvYANpz7ADGa/QAznv8ANJ3+ADie/QA+n/4AAKH+AAWh/gAIov8ADKP/ABKj
        /gAVo/8AEKX/ABmj/wAeov8AGKf/ABuq/gAhov8AJaH+ACCm/QApof8ALaD+ACyl/wAhq/8AMaD/ADui
        /wA9oP0AMav+AD2s/wBOg90AUoPdAF2H3ABFiuIAQovkAEGM5ABXjeEAYJLhAGuU4QBrmOIAcJnjAHSb
        5AB4n+UAQaD9AEek/QBLp/8AQ6r/AECt/gBPrP8AUKf/AFap/wBXrv8AWar/AF2t/wBEsv8ASbD/AFey
        /wBYsP8Ad6HlAH2i5gB/pecAYLD/AP8xcAD/UYYA/3GcAP+RsgD/scgA/9HfAP///wAAAAAALwAgAFAA
        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
        D///8A////g/////////////
</value>
  </data>
</root>